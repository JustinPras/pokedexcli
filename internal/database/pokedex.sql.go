// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pokedex.sql

package database

import (
	"context"
)

const createPokedexEntry = `-- name: CreatePokedexEntry :one
INSERT INTO pokedex(pokemon_name, pokemon_id, json_data)
VALUES (
    ?,
    ?,
    ?
)
RETURNING id, pokemon_name, pokemon_id, json_data
`

type CreatePokedexEntryParams struct {
	PokemonName string
	PokemonID   int64
	JsonData    string
}

func (q *Queries) CreatePokedexEntry(ctx context.Context, arg CreatePokedexEntryParams) (Pokedex, error) {
	row := q.db.QueryRowContext(ctx, createPokedexEntry, arg.PokemonName, arg.PokemonID, arg.JsonData)
	var i Pokedex
	err := row.Scan(
		&i.ID,
		&i.PokemonName,
		&i.PokemonID,
		&i.JsonData,
	)
	return i, err
}

const getPokedex = `-- name: GetPokedex :many
SELECT id, pokemon_name, pokemon_id, json_data FROM pokedex
`

func (q *Queries) GetPokedex(ctx context.Context) ([]Pokedex, error) {
	rows, err := q.db.QueryContext(ctx, getPokedex)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pokedex
	for rows.Next() {
		var i Pokedex
		if err := rows.Scan(
			&i.ID,
			&i.PokemonName,
			&i.PokemonID,
			&i.JsonData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPokemonByName = `-- name: GetPokemonByName :one
SELECT id, pokemon_name, pokemon_id, json_data FROM pokedex
WHERE pokemon_name = ?
`

func (q *Queries) GetPokemonByName(ctx context.Context, pokemonName string) (Pokedex, error) {
	row := q.db.QueryRowContext(ctx, getPokemonByName, pokemonName)
	var i Pokedex
	err := row.Scan(
		&i.ID,
		&i.PokemonName,
		&i.PokemonID,
		&i.JsonData,
	)
	return i, err
}
